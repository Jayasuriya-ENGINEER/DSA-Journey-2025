Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
optimised way:

1st loop->for the number of rows iterations.
2nd loop->for the number of elements in each iterations.
before going to the 2nd loop it is necessary to resize() each rows.

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> triangle(numRows);
        for(int i=0;i<numRows;i++)
        {
            triangle[i].resize(i+1);
            triangle[i][0]=triangle[i][i]=1;
            for(int j=1;j<i;j++)
            {
                triangle[i][j]=triangle[i-1][j-1]+triangle[i-1][j];//triangle[i-1][j-1]element exactly the one above but one place towards left, triangle[i-1][j] exactly the one above of the current element
            }
        }
        
        return triangle;
    }
};
